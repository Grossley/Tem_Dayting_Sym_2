<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Create

//text variables
text_speed = 0.25;
text_name = ""
textX = 30
textY = 10
sep = 36
width = 1190;
charTotal = 0;
update = false;

//text box variables
pos = 500
stroke = 8;
offsetx = 10;
nameInput = false
inputx = 640
inputy = 60
xOffset = 10;
yOffset = 10;
blinkTimer = 30;
blink = true;
uiState = 0;
uiTimer = 45;
uiMax = 45;
uiState2 = 0;

//audio variables
bleep = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if update == true
{
    //UI timer
    if uiTimer &gt; 0
    {
        uiTimer --
    }
    else
    {
        if uiState2 &lt; 2
        {
            uiState2 ++
        }
        else
        {
            uiState2 = 0
        }
        if uiState == 0
        {
            uiState = 1
        } 
        else if uiState == 1
        {
            uiState = 0
        }
        uiTimer = uiMax
    }
    
    //Draw text box
    draw_set_alpha(1)
    draw_set_color(c_white)
    draw_rectangle(offsetx, pos, room_width - offsetx,room_height - offsetx,false)
    draw_set_color(c_black)
    draw_rectangle(offsetx+stroke, pos+stroke, room_width - offsetx - stroke,room_height - offsetx - stroke,false)

    //Draw text when the original string is bigger than the displayed string
    if string_length(obj_date_main.text) &gt;= charTotal
    {
        if string_char_at(obj_date_main.text, charTotal) == " "
        {
            charTotal += 1;
        }
        else
        {
            charTotal += text_speed;
        }
        
    }
    else
    {
        if obj_date_main.text != ""
        {
            if nameInput == true
            {
                draw_sprite(spr_keyboard_ui,uiState2,1200,674)
            }
            else
            {
                draw_sprite(spr_mouse_ui,uiState,1232,654)
            }
        }
    }
    draw_set_color(c_white)
    draw_set_font(fnt_dialogue)
    draw_set_valign(fa_top)
    draw_set_halign(fa_left)
    draw_text(offsetx +stroke + 5, pos +stroke +textY, "*")
    draw_text_ext(offsetx +stroke +textX +10, pos +stroke +textY, string_copy(obj_date_main.text, 1, charTotal), string_height(obj_date_main.text), width)
    
    //Draw name box and name
    if  !(string(text_name) == "")
    {
        draw_set_font(fnt_dialogue)
        draw_set_color(c_white)
        draw_rectangle(offsetx, pos - string_height(text_name)- stroke*2, offsetx + string_width(text_name)*1.2 + stroke*2,pos,false)
        draw_set_color(c_black)
        draw_set_valign(fa_top)
        draw_set_halign(fa_left)
        draw_text_transformed(offsetx + stroke, pos - string_height(text_name)- stroke, text_name,1.2,1.2,0)
    }
}
if nameInput == true
{
    draw_set_font(fnt_dialogue)
    keyboard_string = string_copy(keyboard_string, 1, 26);

    var name = string(keyboard_string)
    var apo = ""
    
    if keyboard_check_pressed(vk_anykey) &amp;&amp; !keyboard_check_pressed(vk_space)
    {
        var rand = floor(random(9))
        if rand == 0
        {
            audio_play_sound(snd_key1, 9, false);
            audio_sound_gain(snd_key1,global.sound_vol, 0);
        }
        else if rand == 1
        {
            audio_play_sound(snd_key2, 9, false);
            audio_sound_gain(snd_key2,global.sound_vol, 0);
        }
        else if rand == 2
        {
            audio_play_sound(snd_key3, 9, false);
            audio_sound_gain(snd_key3,global.sound_vol, 0);
        }
        else if rand == 3
        {
            audio_play_sound(snd_key4, 9, false);
            audio_sound_gain(snd_key4,global.sound_vol, 0);
        }
        else if rand == 4
        {
            audio_play_sound(snd_key5, 9, false);
            audio_sound_gain(snd_key5,global.sound_vol, 0);
        }
        else if rand == 5
        {
            audio_play_sound(snd_key6, 9, false);
            audio_sound_gain(snd_key6,global.sound_vol, 0);
        }
        else if rand == 6
        {
            audio_play_sound(snd_key7, 9, false);
            audio_sound_gain(snd_key7,global.sound_vol, 0);
        }
        else if rand == 7
        {
            audio_play_sound(snd_key8, 9, false);
            audio_sound_gain(snd_key8,global.sound_vol, 0);
        }
        else if rand == 8
        {
            audio_play_sound(snd_key9, 9, false);
            audio_sound_gain(snd_key9,global.sound_vol, 0);
        }
                

    }
    else if keyboard_check_pressed(vk_space)
    {
        var rand2 = floor(random(3))
        if rand2 == 0
        {
            audio_play_sound(snd_space1, 9, false);
            audio_sound_gain(snd_space1,global.sound_vol, 0);
        }
        else if rand2 == 1
        {
            audio_play_sound(snd_space2, 9, false);
            audio_sound_gain(snd_space2,global.sound_vol, 0);
        }
        else if rand2 == 2
        {
            audio_play_sound(snd_space3, 9, false);
            audio_sound_gain(snd_space3,global.sound_vol, 0);
        }
    }
    
    if keyboard_check_pressed(vk_enter)
    {
        global.name = name;
        obj_date_main.frame ++;
        nameInput = false
    }
    
    if blinkTimer &gt; 0
    {
        if blink == true
        {
            apo = "_"
        }
        else if blink == false
        {
            apo = ""
        }
        
        blinkTimer --
    }
    if blinkTimer &lt;= 0
    {
        blinkTimer = 30
        if blink == true
        {
            blink = false
        }
        else if blink == false
        {
            blink = true
        }
    }
    
    if string_width(name)*1.5 &lt; string_width("mmm")*1.5
    {
        draw_set_color(c_white)
        draw_rectangle(inputx-(string_width("mmm")*1.5)/2-xOffset, inputy-(string_height("mmm")*1.5)/2-yOffset,inputx+(string_width("mmm")*1.5)/2+xOffset,inputy+(string_height("mmm")*1.5)/2+yOffset,false)
        draw_set_color(c_black)
        draw_rectangle(inputx-(string_width("mmm")*1.5)/2, inputy-(string_height("mmm")*1.5)/2,inputx+(string_width("mmm")*1.5)/2,inputy+(string_height("mmm")*1.5)/2,false)
    }
    else
    {
        draw_set_color(c_white)
        draw_rectangle(inputx-(string_width(name + " ")*1.5)/2-xOffset, inputy-(string_height(name)*1.5)/2-yOffset,inputx+(string_width(name + " ")*1.5)/2+xOffset,inputy+(string_height(name)*1.5)/2+yOffset,false)
        draw_set_color(c_black)
        draw_rectangle(inputx-(string_width(name + " ")*1.5)/2, inputy-(string_height(name)*1.5)/2,inputx+(string_width(name + " ")*1.5)/2,inputy+(string_height(name)*1.5)/2,false)
    }
    draw_set_color(c_white)
    draw_set_valign(fa_middle)
    draw_set_halign(fa_middle)
    if string(apo) == "_"
    {
        draw_text_transformed(inputx,inputy,string(name + apo),1.5,1.5,0)
    }
    else
    {
        draw_text_transformed(inputx,inputy,string(name + " "),1.5,1.5,0)
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
