<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-15</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Create

//gets button string from creation code
minWidth = 600
width = 700

xOffset = 10;
yOffset = 10;

stroke = 5;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw box and everything

//set font
draw_set_font(fnt_dialogue)
draw_set_alpha(1)
draw_set_blend_mode(bm_normal)
draw_set_valign(fa_top)
draw_set_halign(fa_middle)

if string_width_ext(text,string_height(text),width) &lt; minWidth
{
    draw_set_color(c_black)
    draw_rectangle(x-minWidth/2, y - string_height_ext(text,string_height(text),width)/2,x+minWidth/2,y+string_height_ext(text,string_height(text),width)/2,false)
}
else
{
draw_set_color(c_black)
    draw_rectangle(x-string_width_ext(text,string_height(text),width)/2, y - string_height_ext(text,string_height(text),width)/2,x+string_width_ext(text,string_height(text),width)/2,y+string_height_ext(text,string_height(text),width)/2,false) 
}

//Mouse over fade
if string_width_ext(text,string_height(text),width) &lt; minWidth &amp;&amp; point_in_rectangle(mouse_x, mouse_y, x-minWidth/2-xOffset, y-string_height_ext(text,string_height(text),width)/2-yOffset,x+minWidth/2+xOffset,y+string_height_ext(text,string_height(text),width)/2+yOffset)
{
    draw_set_alpha(0.5)
    draw_set_color(c_white)
    if string_width_ext(text,string_height(text),width) &lt; minWidth
    {
        draw_rectangle(x-minWidth/2-xOffset, y-string_height_ext(text,string_height(text),width)/2-yOffset,x+minWidth/2+xOffset,y+string_height_ext(text,string_height(text),width)/2+yOffset,false)
    }
    else
    {
        draw_rectangle(x-string_width_ext(text,string_height(text),width)/2-xOffset, y-string_height_ext(text,string_height(text),width)/2-yOffset,x+string_width_ext(text,string_height(text),width)/2+xOffset,y+string_height_ext(text,string_height(text),width)/2+yOffset,false)
    }
    if mouse_check_button_pressed(mb_left)
    {
        for(i=0 ;i&lt;=array_height_2d(obj_date_main.play)-1 ;i++)
        {
            if obj_date_main.play[i,0] == "label" &amp;&amp; obj_date_main.play[i,1] == myLabel
            {
                obj_date_main.frame = i;
                
                with obj_choice_fake
                {
                    instance_destroy()
                }
                break;
            }
        }  
    }
}
else if string_width_ext(text,string_height(text),width) &gt; minWidth &amp;&amp; point_in_rectangle(mouse_x, mouse_y, x-string_width_ext(text,string_height(text),width)/2-xOffset, y-string_height_ext(text,string_height(text),width)/2-yOffset,x+string_width_ext(text,string_height(text),width)/2+xOffset,y+string_height_ext(text,string_height(text),width)/2+yOffset)
{
    draw_set_alpha(0.5)
    draw_set_color(c_white)
    if string_width_ext(text,string_height(text),width) &gt; minWidth
    {
        draw_rectangle(x-string_width_ext(text,string_height(text),width)/2-xOffset, y-string_height_ext(text,string_height(text),width)/2-yOffset,x+string_width_ext(text,string_height(text),width)/2+xOffset,y+string_height_ext(text,string_height(text),width)/2+yOffset,false)
    }
    else
    {
        draw_rectangle(x-string_width_ext(text,string_height(text),width)/2-xOffset, y-string_height_ext(text,string_height(text),width)/2-yOffset,x+string_width_ext(text,string_height(text),width)/2+xOffset,y+string_height_ext(text,string_height(text),width)/2+yOffset,false)
    }
    if mouse_check_button_pressed(mb_left)
    {
        for(i=0 ;i&lt;=array_height_2d(obj_date_main.play)-1 ;i++)
        {
            if obj_date_main.play[i,0] == "label" &amp;&amp; obj_date_main.play[i,1] == myLabel
            {
                obj_date_main.frame = i;
                
                with obj_choice_fake
                {
                    instance_destroy()
                }
                break;
            }
        }  
    }
}

//Align and draw text
draw_set_alpha(1)
draw_set_blend_mode(bm_normal)
draw_set_color(c_white)
draw_set_valign(fa_middle)
draw_set_halign(fa_middle)
draw_text_ext(x,y,text,string_height(text),width)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
