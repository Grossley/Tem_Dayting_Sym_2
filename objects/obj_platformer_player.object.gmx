<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_platform_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup
xVel = 0;
yVel = 0;
xMax = 5;
yMax = 10;
xAcc = 0.3;
yAcc = 0.1;
jumpAcc = -8;
inAir = true;
drawAlpha = 0;

glitchTimer = 0

pointoffset = 1
offset = 4;

colUp = false;
colDown = false;

image_speed = 0

if !audio_is_playing(snd_platform_music)
{
    audio_play_sound(snd_platform_music, 1, true);
    audio_sound_gain(snd_platform_music,global.music_vol*0.5, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Character Movement
if global.crash == false
{
    //VERTICAL
    //if player is in air
    if inAir == true
    {
        //Add extra height when holding the jump button while in the air
        if keyboard_check(vk_space) &amp;&amp; yVel &gt; -1 &amp;&amp; yVel &lt; 0
        {
            yAcc = 0.05 * scr_fps_adjustment()
        }
        else
        {
            yAcc = 0.2 * scr_fps_adjustment()
        }
        
        //if will touch the floor snap to it
        if collision_rectangle(x-1, y + yVel, x + 1,y-sprite_height/2,obj_collision,false,true)
        {
            //snap to the top of platform
            for(ySnap = 0; ySnap&lt;yMax; ySnap++)
            {
                if collision_rectangle(x - 1, floor(y) + ySnap, x + 1,y-sprite_height/2,obj_collision,false,true)
                {
                    inAir = false;
                    yVel = 0;
                    y = floor(y) + ySnap
                    break;
                }
            }
        }
        
        //collision points on the left and right bottom side
        else if !collision_rectangle(x - sprite_width/2 + 1, y - sprite_height + yVel, x + sprite_width/2 - 1,y-sprite_height/2,obj_collision,false,true) &amp;&amp; (collision_point(x - sprite_width/2+ pointoffset+xVel,y-pointoffset +yVel ,obj_collision,false,true) || collision_point(x + sprite_width/2 - pointoffset+xVel,y-pointoffset +yVel ,obj_collision,false,true)) &amp;&amp; yVel &gt; 0
        {
            //snap to the top of platform
            for(pS = 0; pS&lt;yMax+1; pS++)
            {
                //left collision
                if collision_point(x - sprite_width/2+ pointoffset- xVel,floor(y)-pointoffset +pS ,obj_collision,false,true)
                {
                    for (c1 = 1;c1&lt;xMax;c1++)
                    {
                        if !collision_point(x - sprite_width/2+ pointoffset- xVel,floor(y)-pointoffset -c1,obj_collision,false,true)
                        {
                            inAir = false;
                            yVel = 0;
                            y = floor(y) + pS-c1+1;
                            x += xVel * scr_fps_adjustment()
                            break;
                        }
                    }
                    break;
                }
                //right collision
                else if collision_point(x + sprite_width/2 - 1+xVel,floor(y)-pointoffset +pS ,obj_collision,false,true)
                {
                    for (c2 = 1;c2&lt;xMax;c2++)
                    {
                        if !collision_point(x + sprite_width/2- 1+ xVel,floor(y)-pointoffset -c2,obj_collision,false,true)
                        {
                            inAir = false;
                            yVel = 0;
                            y = floor(y) + pS-c2+1;
                            x += xVel * scr_fps_adjustment()
                            break;
                        }
                    }
                    break;
                }
            }
        }
        
        //else gravity
        else
        {
            if(yVel &lt; yMax)
            {
                yVel += yAcc
            }
        }
    }
    else
    {
        //correct player when standing on the left or right side of the sprite
        if !collision_rectangle(x - sprite_width/2 + 1, y + yVel, x + sprite_width/2 - 1,y-sprite_height/2,obj_collision,false,true) &amp;&amp; (collision_point(x - sprite_width/2+ 1 + xVel,y-1,obj_collision,false,true) || collision_point(x + sprite_width/2 - 1 +xVel,y-1,obj_collision,false,true))
        {
            for(cS = 0; cS&lt;xMax*3; cS++)
            {
                if !collision_point(x - sprite_width/2 + pointoffset +xVel,floor(y)-pointoffset -cS,obj_collision,false,true)
                {
                    y = floor(y) - cS-1;
                    break;
                }
                else if !collision_point(x + sprite_width/2 - pointoffset+xVel,floor(y)-pointoffset -cS,obj_collision,false,true)
                {
                    y = floor(y) - cS-1;
                    break;
                }
            }
        }
    }
    
    //jump
    if(keyboard_check_pressed(vk_space)) &amp;&amp; inAir == false
    {
        inAir = true
        yVel = jumpAcc;
        audio_play_sound(snd_jump, 10, false);
        audio_sound_gain(snd_jump,global.sound_vol*0.2, 0);
    }
    
    //HORIZONTAL
    //move left
    if keyboard_check(vk_left)
    {
        image_speed =0.1
        if collision_rectangle(x - sprite_width/2 + xVel-2, y - offset, x, y - sprite_height + offset, obj_collision,false,true)
        {
            xVel = 0;
        }
        else
        {
            xVel = -xMax
        }
        
        //fall down when not on platform
        if !collision_rectangle(x - sprite_width/2 + offset, y, x + sprite_width/2 - offset,y-sprite_height/2,obj_collision,false,true)
        {
            inAir = true;
        }
    }
    //move right
    else if keyboard_check(vk_right)
    {
        image_speed =0.1
        if collision_rectangle(x + sprite_width/2 + xVel, y - offset, x, y - sprite_height + offset, obj_collision,false,true)
        {
            xVel = 0;
        }
        else
        {
            xVel = xMax
            
        }
        
        //fall down when not on platform
        if !collision_rectangle(x - sprite_width/2 + offset, y, x + sprite_width/2 - offset,y-sprite_height/2,obj_collision,false,true)
        {
            inAir = true;
        }
    }
    else
    {
        image_speed = 0
        xVel = 0;
    }
    
    
    if(y &gt; sprite_height+720)
    {
        y = ystart;
        x = xstart;
        audio_play_sound(snd_death, 5, false);
        audio_sound_gain(snd_death,global.sound_vol*0.2, 0);
        inAir = true
    }
    
    y += yVel * scr_fps_adjustment()
    x += xVel * scr_fps_adjustment()
}

if window_get_caption() == "Tem Dayting Sym 2 (Not Responding)"
{
    if ! instance_exists(obj_crash_box)
    {
        instance_create(view_xview[0] + 640, view_yview[0] +360,obj_crash_box)
    }
}

if global.crash ==true
{
    image_speed = 0
    if glitchTimer &gt; 0
    {
        glitchTimer-=1 * scr_fps_adjustment()
    }
    else
    {
        audio_stop_sound(snd_platform_music)
        var snd = audio_play_sound(snd_platform_music, 0, false);
        glitchTimer = 30
        audio_sound_set_track_position(snd,10)
        audio_sound_gain(snd_platform_music,global.music_vol*0.5, 0);
    }
}

//Bad framerate
/*if room == rm_platformer_1 || room == rm_platformer_2 || room == rm_platformer_4
{
    room_speed = ceil(random_range(20,60))
}
else
{
    room_speed = 9999
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bounce">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if yVel &gt; 0
{
    yVel = -15;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw
draw_self()

if global.coins &gt; 0
{
    draw_set_color(c_white)
    draw_set_font(fnt_dialogue)
    draw_set_halign(fa_center)
    draw_sprite(spr_platformer_coin,1,view_xview[0]+20,30)
    draw_text(view_xview[0]+ 70,30," x " + string(global.coins))
}

if global.crash == true
{
    if drawAlpha &lt; 0.5
    {
        window_set_caption("Tem Dayting Sym 2 (Not Responding)");
        drawAlpha+=0.02
    }
    draw_set_alpha(drawAlpha)
    draw_set_colour(c_white); 
    draw_rectangle(view_xview[0],view_yview[0],view_xview[0] + 1280, view_yview[0] + 720, false)
    draw_set_alpha(1)
}
else
{
    if window_get_caption() != "Tem Dayting Sym 2"
    {
        window_set_caption("Tem Dayting Sym 2")
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
